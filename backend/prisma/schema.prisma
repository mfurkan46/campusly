// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  username      String    @unique
  password      String
  studentId     String    @unique
  bio           String?
  profileImage  String?
  faculty       String?  
  department    String?
  createdAt     DateTime  @default(now())
  followers     Int[]     
  following     Int[]     
  posts         Post[]    
  starredPosts  Post[]    @relation("StarredPosts") 
  bookmarkedPosts Post[]  @relation("BookmarkedPosts")
  sentMessages  Message[] @relation("SentMessages") 
  receivedMessages Message[] @relation("ReceivedMessages") 
}

model Post {
  id           Int      @id @default(autoincrement())
  content      String
  image        String?  
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  targetPostId Int?     
  targetPost   Post?    @relation("PostComments", fields: [targetPostId], references: [id])
  comments     Post[]   @relation("PostComments") 
  stars        Int[]    @default([])
  starredBy    User[]   @relation("StarredPosts") 
  bookmarks    Int[]    @default([]) 
  bookmarkedBy User[]   @relation("BookmarkedPosts") 
  hashtags    String[]    @default([])  
  views        Int      @default(0) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Message {
  id          Int      @id @default(autoincrement())
  content     String
  senderId    Int
  receiverId  Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}

model Menu {
  id              Int      @id @default(autoincrement())
  date            DateTime @unique
  mainDishName    String
  mainDishCalories Int
  sideDishName    String
  sideDishCalories Int
  starterName     String
  starterCalories  Int
  extraName       String
  extraCalories    Int
}